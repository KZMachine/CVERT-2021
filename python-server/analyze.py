import sys
import os
import cv2 as cv
import numpy as np
from multiprocessing import Pool
from argparse import ArgumentParser
import glob

import timer    #Timer class
from status import status, log
from algorithms import run_analysis


#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------

#Global Variables
img_list = []
parser = ArgumentParser()
extensions = (".jpg", ".jpeg", ".png", ".mp4")

analyzed_folder = "Analyzed"
other_analyzed_folder = "Other Analyzed"

original_folder = "Original"
modified_original = "Modified Original"

#Analysis Parameters
total_time = timer.Timer()

#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------

try:
    
    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    parser.add_argument("-F", "--folder", dest="folderPath", help="path to the folder containing images to process.", metavar="folder", default=None)
    parser.add_argument("-p", "--processes", dest="procNum", help="Number of processes to create to process images", default=1, metavar="threads")
    args = parser.parse_args()
    
    batch_path = args.folderPath
    original_folder = os.path.join( batch_path, original_folder)

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    #Looks in the copy folder and adds the correct file types to the image list
    #This is a case insensitive version
    if os.path.exists(original_folder):
        for file in glob.glob(os.path.join(original_folder, '*')):
            ext = os.path.splitext(file)[-1]
            if ext.lower() in extensions:
                img_list.append( (file, batch_path) )
    else:
        for file in glob.glob(os.path.join(batch_path, '*')):
            ext = os.path.splitext(file)[-1]
            if ext.lower() in extensions:
                img_list.append( (file, batch_path) )
            
                

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    #Create the output directory if it does not exist
    if not os.path.exists(os.path.join( batch_path, analyzed_folder)):
        os.makedirs(os.path.join( batch_path, analyzed_folder))

    if not os.path.exists(os.path.join( batch_path, other_analyzed_folder)):
        os.makedirs(os.path.join( batch_path, other_analyzed_folder))

    if not os.path.exists(os.path.join( batch_path, modified_original)):
        os.makedirs(os.path.join( batch_path, modified_original))

    #Create the log files if they do not exist
    #TODO: Add a time stamp when the file was created
    b_log = open(os.path.join( batch_path, 'batch_log.txt'), 'a+')
    d_log = open(os.path.join( batch_path, 'detected_log.txt'), 'a+')
    o_log = open(os.path.join( batch_path, 'other_log.txt'), 'a+')
    e_log = open(os.path.join( batch_path, 'error_log.txt'), 'a+')

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------
    
    if __name__ == '__main__':
        total_time.start()
        status('-i-', 'Initialization completed')
        status('-i-', 'Beginning Image Analysis...')
        log(b_log, '-i-', 'Initialization completed')
        log(b_log, '-i-', 'Beginning Image Analysis...')

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':  #Free up the log files
        b_log.close()
        d_log.close()
        o_log.close()
        e_log.close()

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':  #In Windows you need to protect the thread creation froms each child thread. If not done, each child thread will create subthreads.
        if int(args.procNum) > 1:
            with Pool(int(args.procNum)) as p:
                p.map(run_analysis, img_list)
        else:
            for i in range(0, len(img_list)):
                run_analysis(img_list[i])

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':
        total_time.stop()

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':    #Replace with writing to log file
        status('-f-', [ total_time.get_time(), len(img_list) ] )
        with open(os.path.join( batch_path, 'batch_log.txt'), 'a+') as b_log:
            log(b_log, '-f-', [ total_time.get_time(), len(img_list) ] )
            b_log.close()

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

except Exception as e:
    status('-e-', str(e) )
    with open(os.path.join( batch_path, 'error_log.txt'), 'a+') as e_log:
        log(e_log, '-e-', str(e) )
        e_log.close()



#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
